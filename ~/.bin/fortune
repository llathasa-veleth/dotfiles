#!/usr/bin/env python

# gonna refactor all of these some day.

import os, textwrap, json
from requests import post, exceptions
from time import strftime, localtime, gmtime
from uptime import uptime as uptimec

#################### COLORS ####################
_reset_color    = "\033[0m"
_frame_color    = "\033[34m"
_quote_color    = "\033[3m\033[37m"
_author_color   = "\033[1m\033[34m"
_datetime_color = "\033[34m"
_keywords_color = "\033[1m\033[31m"
####################  MISC  ####################
_, tty_width    = os.popen("stty size", 'r').read().split()
tty_width       = round(int(tty_width)*0.7)
tty_width_fixed = tty_width-2

try:
  payload = {
    "method" : "getQuote",
    "format" : "json",
    "lang"   : "en"
  }
  response = post("https://api.forismatic.com/api/1.0/", data = payload)
  response = ''.join([char if ord(char) < 128 else '' for char in response.text])
  response_json = json.loads(response.replace('\\\'', '\''))
  quoteText   = response_json["quoteText"].strip()
  quoteAuthor = response_json["quoteAuthor"].strip()
  successful = True
except exceptions.ConnectionError:
  successful = False
  quoteAuthor = "Failed to estabilish internet connection. Try again"

print(f"{_frame_color}┏{'━'*(tty_width_fixed)}┓{_reset_color}")

if successful:
  splitter = textwrap.TextWrapper(width = round(tty_width*0.9))
  splitted_text = splitter.wrap(text = quoteText)
  splitted_text[0] = "«"+splitted_text[0]
  splitted_text[-1] = splitted_text[-1]+"»"
  [
    print(f"{_frame_color}┃{_reset_color} {_quote_color}{line}{_reset_color}{' '*(tty_width-len(line)-4)} {_frame_color}┃{_reset_color}")
    for line in splitted_text
  ]
if quoteAuthor:
  splitter = textwrap.TextWrapper(width = round(tty_width*0.9))
  quoteAuthor = splitter.wrap(text = quoteAuthor)
  [
    print(f"{_frame_color}┃{_reset_color} {_author_color}{line}{_reset_color}{' '*(tty_width-len(line)-4)} {_frame_color}┃{_reset_color}")
    for line in quoteAuthor
  ]

normal_width = [i for i in range(24, tty_width_fixed)]
normal_scale = [i for i in range(2, tty_width_fixed)]
try:
  first_part_floor = '━'*round(normal_scale[normal_width.index(tty_width_fixed-1)])

  print(f"{_frame_color}┗{first_part_floor}┳{'━'*(tty_width-len(first_part_floor)-3)}┫{_reset_color}")

  current_date = strftime("%A, %d", localtime())
  current_time = strftime("%I:%M %p", localtime())

  uptime_sec   = round(uptimec())
  uptime       = ["HOURS/MINUTES COUNT",
                  "H/M"]
  if uptime_sec < 3600:
    uptime[0] = round(uptime_sec/60)
    uptime[1] = "min"
  elif uptime_sec >= 3600 and uptime_sec < 3619:
    uptime[0] = 1
    uptime[1] = "hour"
  elif uptime_sec >= 3619:
    uptime[0] = round(uptime_sec/3600, 2)
    uptime[1] = "hours"
  uptime = ' '.join(map(str, uptime))

  print(f"""{' '*(len(first_part_floor)+1)}{_frame_color}┃{_reset_color} {_keywords_color}Date:{_reset_color}{' '*(tty_width-len(first_part_floor)-10-len(current_date))}{_datetime_color}{current_date}{_reset_color} {_frame_color}┃{_reset_color}""")

  print(f"{' '*(len(first_part_floor)+1)}{_frame_color}┃{_reset_color} {_keywords_color}Time:{_reset_color}{' '*(tty_width-len(first_part_floor)-10-len(current_time))}{_datetime_color}{current_time}{_reset_color} {_frame_color}┃{_reset_color}")

  print(f"{' '*(len(first_part_floor)+1)}{_frame_color}┃{_reset_color} {_keywords_color}Uptime:{_reset_color}{' '*(tty_width-len(first_part_floor)-12-len(uptime))}{_datetime_color}{uptime}{_reset_color} {_frame_color}┃{_reset_color}")

  print(f"""{_frame_color}{' '*(len(first_part_floor)+1)}┗{'━'*(tty_width-len(first_part_floor)-3)}┛{_reset_color}""")
except ValueError:
  print(f"{_frame_color}┗{'━'*(tty_width_fixed)}┛{_reset_color}")
